# This model config is same as the "model" in 
# "config/centerpoint_0075voxel_second_secfpn_circlenms_4x8_cyclic_20e_nus.py" 
# in mmdetection3d

type: CenterPoint
pts_voxel_layer: { 
    max_num_points: 10, 
    voxel_size: [0.075, 0.075, 0.2], 
    max_voxels: [90000, 120000],
    point_cloud_range: [-54, -54, -5.0, 54, 54, 3.0],
}
pts_voxel_encoder: {
    type: HardSimpleVFE, 
    num_features: 5
}
pts_middle_encoder: {
    type: SparseEncoder,
    in_channels: 5,
    sparse_shape: [41, 1440, 1440],
    output_channels: 128,
    order: [conv, norm, act],
    encoder_channels: [[16, 16, 32], [32, 32, 64], [64, 64, 128], [128, 128]],
    encoder_paddings: [[0, 0, 1], [0, 0, 1], [0, 0, [0, 1, 1]], [0, 0]],
    block_type: basicblock
}
pts_backbone: {
    type: SECOND,
    in_channels: 256,
    out_channels: [128, 256],
    layer_nums: [5, 5],
    layer_strides: [1, 2],
    norm_cfg: {
        type: BN, 
        eps: 0.001, 
        momentum: 0.01
    },
    conv_cfg: {
        type: Conv2d, 
        bias: False
    }
}
pts_neck: {
    type: SECONDFPN,
    in_channels: [128, 256],
    out_channels: [256, 256],
    upsample_strides: [1, 2],
    norm_cfg: {
        type: BN, 
        eps: 0.001, 
        momentum: 0.01
    },
    upsample_cfg: {
        type: deconv, 
        bias: False
    },
    use_conv_for_no_stride: True
}
pts_bbox_head: {
    type: CenterHead,
    in_channels: 512,  # sum([256, 256]),
    tasks: [
        {num_class: 1, class_names: [car]},
        {num_class: 2, class_names: [truck, construction_vehicle]},
        {num_class: 2, class_names: [bus, trailer]},
        {num_class: 1, class_names: [barrier]},
        {num_class: 2, class_names: [motorcycle, bicycle]},
        {num_class: 2, class_names: [pedestrian, traffic_cone]},
    ],
    common_heads: {
        reg: [2, 2], 
        height: [1, 2], 
        dim: [3, 2], 
        rot: [2, 2], 
        vel: [2, 2]
    },
    share_conv_channel: 64,
    bbox_coder: {
        type: CenterPointBBoxCoder,
        post_center_range: [-61.2, -61.2, -10.0, 61.2, 61.2, 10.0],
        max_num: 500,
        score_threshold: 0.1,
        out_size_factor: 8,
        voxel_size: [0.075, 0.075],
        code_size: 9,
        pc_range: [-54, -54]
    },
    separate_head: {
        type: SeparateHead, 
        init_bias: -2.19, 
        final_kernel: 3
    },
    loss_cls: {
        type: GaussianFocalLoss, 
        reduction: mean
    },
    loss_bbox: {
        type: L1Loss, 
        reduction: mean, 
        loss_weight: 0.25
    },
    norm_bbox: True
}
# model training and testing settings
train_cfg: {
    pts: {
        grid_size: [1440, 1440, 40],
        voxel_size: [0.075, 0.075, 0.2],
        out_size_factor: 8,
        dense_reg: 1,
        gaussian_overlap: 0.1,
        max_objs: 500,
        min_radius: 2,
        code_weights: [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.2, 0.2],
        point_cloud_range: [-54, -54, -5.0, 54, 54, 3.0]
    }
}
test_cfg: {
    pts: {
        post_center_limit_range: [-61.2, -61.2, -10.0, 61.2, 61.2, 10.0],
        max_per_img: 500,
        max_pool_nms: False,
        min_radius: [4, 12, 10, 1, 0.85, 0.175],
        score_threshold: 0.1,
        out_size_factor: 8,
        voxel_size: [0.075, 0.075],
        nms_type: circle,  # 'rotate', what meaning
        pre_max_size: 1000,
        post_max_size: 83,
        nms_thr: 0.2,
        pc_range: [-54, -54]
    }
}
